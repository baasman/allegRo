% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/index_funcs.R
\name{createFreeTextIndex}
\alias{createFreeTextIndex}
\title{Create a free-text index}
\usage{
createFreeTextIndex(service, catalogid = "root", repo = "", indexName,
  predicate, indexLiterals = NULL, indexResources = FALSE,
  indexFields = NULL, minimumWordSize = NULL, stopWords = NULL,
  wordFilter = NULL, innerChars = NULL, borderChars = NULL,
  tokenizer = NULL, reIndex = NULL)
}
\arguments{
\item{service}{Service object containing service url, username, and password.}

\item{catalogid}{Id for catalog of interest.}

\item{repo}{Id for repository of interest.}

\item{indexName}{Name of index of interest}

\item{predicate}{Can be a list. Indicates the predicates that should be indexed. When not given, all predicates are indexed.}

\item{indexLiterals}{A boolean (defaults to true) that determines whether literal are indexed.}

\item{indexResources}{Can be given the values true, false, or short. Default is false. short means to index only the part of the resource after the last # or / character.}

\item{indexFields}{...}

\item{minimumWordSize}{...}

\item{stopWords}{Can be a list.  Determines the set of stop-words, words that are not indexed. Defaults to a small set of common English words. To override this default and specify that no stop-words should be used, pass this parameter once, with an empty list().}

\item{wordFilter}{Can be a list. Specify a word filter, which is an operation applied to words before they are indexed and before they are searched for. Used to 'normalize' words.}

\item{innerChars}{...}

\item{borderChars}{...}

\item{tokenizer}{...}

\item{reIndex}{Defaults to TRUE. Should old triples be re-indexed}
}
\description{
Create or modify a freetext-index. I suggest reading the official documentation at
http://franz.com/agraph/support/documentation/current/text-index.html
}
\examples{
\dontrun{
service = createService('localhost','user','password')
createFreeTextIndex(service,repo = 'testRepo',indexName = 'index',
predicate = '<p>',stopWords = list('and','it'))
}
}

